/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE_L 0
#define NAV_L  1
#define SYM_L  2
#define NUM_L  3

// hyper and meh keys
#define HYP LS(LC(LA(LGUI)))
#define MEH LS(LC(LALT))

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
};

&sk {
    release-after-ms = <2000>;
    quick-release;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            key-positions = <1 2>;
            timeout-ms = <50>;
            bindings = <&kp ESC>;
            layers = <BASE_L>;
        };

        combo_enter {
            key-positions = <27 28>;
            timeout-ms = <50>;
            bindings = <&kp ENTER>;
            layers = <BASE_L>;
        };

        combo_chord {
            key-positions = <11 12>;
            timeout-ms = <50>;
            bindings = <&kp LG(SPACE)>;
            layers = <BASE_L>;
        };

        // left_bkt {
        //     bindings = <&kp LBKT>;
        //     key-positions = <3 2>;
        //     timeout-ms = <50>;
        // };

        // right_bkt {
        //     bindings = <&kp RBKT>;
        //     key-positions = <6 7>;
        //     timeout-ms = <50>;
        // };

        // left_par {
        //     bindings = <&kp LEFT_PARENTHESIS>;
        //     key-positions = <12 13>;
        //     timeout-ms = <50>;
        // };

        // right_par {
        //     bindings = <&kp RIGHT_PARENTHESIS>;
        //     key-positions = <16 17>;
        //     timeout-ms = <50>;
        // };

        // left_brace {
        //     bindings = <&kp LEFT_BRACE>;
        //     key-positions = <23 22>;
        //     timeout-ms = <50>;
        // };

        // right_brace {
        //     bindings = <&kp RIGHT_BRACE>;
        //     key-positions = <26 27>;
        //     timeout-ms = <50>;
        // };

        // bac {
        //     bindings = <&kp BACKSLASH>;
        //     key-positions = <4 5>;
        // };

        // pipe {
        //     bindings = <&kp PIPE>;
        //     key-positions = <14 15>;
        // };
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <180>;
            global-quick-tap;
        };

        ltq: ltq {
            compatible = "zmk,behavior-hold-tap";
            label = "LTQ";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "hold-preferred";
            bindings = <&mo>, <&kp>;

            quick-tap-ms = <180>;
            global-quick-tap;
        };

        as: as {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <135>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_0 {
            bindings = <
&kp Q          &kp W          &kp F         &kp P           &kp B             &kp J          &kp L              &kp U                  &kp Y                    &as COLON SEMICOLON
&hm LCTRL A    &hm LALT R     &hm LCMD S    &hm LSHIFT T    &hm HYP G         &hm HYP M      &hm RIGHT_SHIFT N  &hm LCMD E             &hm RIGHT_ALT I          &hm RCTRL O
&kp Z          &mt LG(X) X    &mt LG(C) C   &lt NUM_L D     &mt LG(V) V       &mt RCMD K     &lt NUM_L H          &as LESS_THAN COMMA  &as GREATER_THAN PERIOD  &as QUESTION SLASH
        &ltq 1 BACKSPACE      &lt SYM_L BACKSPACE    &lt NAV_L SPACE                  &mt LSHIFT TAB     &trans  &trans
            >;
        };

        layer_1{
            bindings = <
&trans        &trans         &kp UP           &trans      &trans             &kp PG_UP        &kp HOME        &kp UP          &kp END     &trans
&kp LCTRL     &kp LALT       &kp LCMD         &kp LSHIFT  &trans             &kp PG_DN        &kp LEFT        &kp DOWN        &kp RIGHT   &trans
&kp LS(LCTRL) &kp LS(LALT)   &kp LS(LCMD)     &trans      &trans             &kp LC(PG_UP)    &kp LC(PG_DN)   &kp LA(GRAVE)   &trans      &trans
                         &trans       &trans      &trans             &trans           &trans          &trans
            >;
        };

        layer_2 {
            bindings = <
&kp EXCLAMATION    &kp AT_SIGN     &kp HASH   &kp DOLLAR   &kp PERCENT               &trans             &trans       &trans       &trans      &as COLON SEMICOLON
&kp LCTRL          &kp LALT        &kp LCMD   &kp LSHIFT   &as TILDE GRAVE           &as PLUS EQUAL     &kp LPAR     &kp LBRC     &kp LBKT    &as DOUBLE_QUOTES SINGLE_QUOTE
&kp CARET          &kp AMPERSAND   &kp ASTRK  &kp PIPE     &kp BACKSLASH             &kp TILDE          &kp RPAR     &kp RBRC     &kp RBKT    &as UNDER MINUS
                   &trans                &trans            &trans                    &kp RIGHT_SHIFT    &trans     &trans
            >;
        };

        layer_3 {
            bindings = <
&kp F9     &kp F10     &kp F11     &kp F12     &kp F15             &kp KP_ASTERISK     &kp NUMBER_7    &kp NUMBER_8   &kp NUMBER_9  &kp PLUS
&kp F5     &kp F6      &kp F7      &kp F8      &kp F14             &as PLUS EQUAL      &kp NUMBER_4    &kp NUMBER_5   &kp NUMBER_6  &as DOUBLE_QUOTES SINGLE_QUOTE
&kp F1     &kp F2      &kp F3      &kp F4      &kp F13             &kp NUMBER_0        &kp NUMBER_1    &kp NUMBER_2   &kp NUMBER_3  &kp MINUS
                &kp LCTRL       &kp LALT       &kp LCMD            &kp LSHIFT        &trans             &trans
            >;
        };

        layer_4 {
            bindings = <
&trans          &msc SCRL_UP   &mmv MOVE_UP  &msc SCRL_DOWN  &trans  &trans          &trans  &trans  &trans  &trans
&trans          &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans  &trans          &trans  &trans  &trans  &trans
&trans          &trans          &trans          &trans  &trans  &trans          &trans  &trans  &trans  &trans
        &trans          &mkp LCLK  &mkp RCLK         &trans  &trans  &trans
            >;
        };

        layer_5 {
            bindings = <
&trans          &trans          &trans          &trans  &trans  &trans          &trans  &trans  &trans  &trans
&trans          &trans          &trans          &trans  &trans  &trans          &trans  &trans  &trans  &trans
&trans          &trans          &trans          &trans  &trans  &trans          &trans  &trans  &trans  &trans
        &trans          &trans          &trans          &trans  &trans  &trans
            >;
        };

        layer_6 {
            bindings = <
&trans          &trans          &trans          &trans  &trans  &trans          &trans  &trans  &trans  &trans
&trans          &trans          &trans          &trans  &trans  &trans          &trans  &trans  &trans  &trans
&trans          &trans          &trans          &trans  &trans  &trans          &trans  &trans  &trans  &trans
        &trans          &trans          &trans          &trans  &trans  &trans
            >;
        };

        layer_7 {
            bindings = <
&trans          &trans          &trans          &trans  &trans  &trans          &trans  &trans  &trans  &trans
&trans          &trans          &trans          &trans  &trans  &trans          &trans  &trans  &trans  &trans
&trans          &trans          &trans          &trans  &trans  &trans          &trans  &trans  &trans  &trans
        &trans          &trans          &trans          &trans  &trans  &trans
            >;
        };
    };
};